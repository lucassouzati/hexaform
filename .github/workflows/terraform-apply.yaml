name: "Terraform Apply"

on:
  push:
    branches:
      - main

env:
  TF_CLOUD_ORGANIZATION: "hexafood"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "hexaform"
  CONFIG_DIRECTORY: "./"

jobs:
  terraform:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: apply-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}

      - name: Create Apply Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: apply-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}

      - name: Apply
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.0.0
        if: fromJSON(steps.apply-run.outputs.payload).data.attributes.actions.IsConfirmable
        id: apply
        with:
          run: ${{ steps.apply-run.outputs.run_id }}
          comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"
      
      - name: Generate kubeconfig
        id: get_kubeconfig
        run: |
          echo "::set-output name=kubeconfig::$(terraform output -raw kubeconfig)"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Update kubeconfig secret
        env:
          KUBECONFIG_CONTENT: ${{ steps.get_kubeconfig.outputs.kubeconfig }}
          REPOSITORY: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Convertendo o conteúdo do kubeconfig para base64
          KUBECONFIG_ENCODED=$(echo -n "$KUBECONFIG_CONTENT" | base64)

          # Definindo o nome da secret
          SECRET_NAME="KUBECONFIG"

          # Payload JSON para a API do GitHub
          PAYLOAD=$(echo -n "{\"encrypted_value\":\"${KUBECONFIG_ENCODED}\",\"key_id\":\"$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" https://api.github.com/repos/${REPOSITORY}/actions/secrets/public-key | jq -r .key_id)\"}")

          # Fazendo a chamada à API para criar ou atualizar a secret
          curl \
            -X PUT \
            -H "Authorization: token ${GITHUB_TOKEN}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${REPOSITORY}/actions/secrets/${SECRET_NAME}" \
            -d "$PAYLOAD"

  setup-and-deploy:
    name: K8S Deployment
    needs: terraform
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Initialize Terraform
      run: terraform init
  
    - name: Get Terraform Outputs
      id: get_tf_outputs
      run: |
        ROLE_ARN=$(terraform output -raw module.node.pod_service_account_role_arn)"
        echo "ROLE_ARN=$ROLE_ARN" >> $GITHUB_ENV
    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region us-east-1 --name hexaform

    - name: Helm Install and Kubectl Apply
      env:
        ROLE_ARN: ${{ env.ROLE_ARN }}
      run: |
        helm repo add secrets-store-csi-driver https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts
        helm upgrade --install -n kube-system csi-secrets-store secrets-store-csi-driver/secrets-store-csi-driver
        kubectl apply -f https://raw.githubusercontent.com/aws/secrets-store-csi-driver-provider-aws/main/deployment/aws-provider-installer.yaml
        helm upgrade --install -n kube-system --set syncSecret.enabled=true csi-secrets-store secrets-store-csi-driver/secrets-store-csi-driver
        helm upgrade --install hexacluster-v0.0.3 hexacluster --set serviceAccount.annotations.eks.role_arn=$ROLE_ARN
  